# -*- coding: utf-8 -*-
"""2011json_cutVillages_combined_2020.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nz2Rc50pKMxkz25NYwIKHm_jl9wvF6r-
"""
# Commented out IPython magic to ensure Python compatibility.
import json                                                                                          
import sys 
import rasterio
from rasterio.mask import mask
from json import loads
import sys 
import os
from libtiff import TIFF                                                                             
import sys 
import os
from PIL import Image
from os import listdir
from os.path import isfile, join
import pickle
import h5py
import scipy.misc
import glob
import imageio
from os import listdir
from os.path import isfile, join
import cv2
from matplotlib import pyplot as plt
import numpy as np
import time
from tqdm import tqdm

def crop_center(pil_img, crop_width, crop_height):
    img_width, img_height = pil_img.size
    return pil_img.crop(((img_width - crop_width) // 2,
                        (img_height - crop_height) // 2,
                        (img_width + crop_width) // 2,
                        (img_height + crop_height) // 2))

# statelist = ['AP', 'BR', 'CG', 'GJ', 'JH']
statelist = ['PB','CG', 'UP', 'MH', 'AP', 'BR', 'JH', 'GJ', 'TN', 'KA', 'RJ', 'HR', 'MP', 'OR']
# statelist = ['OR','MP']
countfull, count150 = [], []
time_list = []
tifffiles = sys.argv[1]
json_ = sys.argv[2]
out = sys.argv[3]

for state in statelist:
    time1 = time.time()
    count1, count2 = 0,0
    # folder_containing_tifffiles = '/home/cse/mtech/mcs202448/adithya_data_folder/cutVillages_2019/state_tiff_2019' + '/' + state
    # json_file = '/home/cse/mtech/mcs202448/adithya_data_folder/cutVillages_2019/state_json' + '/' + state + '.geojson' 
    folder_containing_tifffiles = tifffiles + '/' + state
    json_file = json_ + '/' + state + '.geojson' 

    allTiffFiles = [f for f in listdir(folder_containing_tifffiles) if isfile(join(folder_containing_tifffiles, f))]
    jsonFileList = [json_file]
    
    # outputFolder = '/home/cse/mtech/mcs202448/adithya_data_folder/cutVillages_2019/state_150x/' + state +'_150x' 
    outputFolder = out + '/' + state + '_150x'
    if not os.path.exists(outputFolder):
        os.makedirs(outputFolder)
    
    for tiffFileName in tqdm(allTiffFiles):
        for jsonFileName in jsonFileList:
            stateData = json.loads(open(jsonFileName).read())
            # print('tiffFileName',tiffFileName)
            # print('jsonFileName',jsonFileName)
            for currVillageFeature in tqdm(stateData["features"]):
                try:
                    if "pc01_village_id" in currVillageFeature["properties"]:
                        vCode2001=currVillageFeature["properties"]["pc01_village_id"]
                    else:
                        vCode2001=currVillageFeature["properties"]["pc01_villa"]
                        
                    cenCode2001 = currVillageFeature["properties"]["C_CODE01"]
                    
                    if "pc11_village_id" in currVillageFeature["properties"]:
                        vCode2011=currVillageFeature["properties"]["pc11_village_id"]
                    else:
                        vCode2011=currVillageFeature["properties"]["pc11_villa"]
                    geoms=[currVillageFeature["geometry"]]
                    with rasterio.open(folder_containing_tifffiles+'/'+tiffFileName) as src:
                        out_image, out_transform = mask(src, geoms, crop=True)

                    out_meta = src.meta.copy()
                    # save the resulting raster  
                    out_meta.update({"driver": "GTiff",
                    "height": out_image.shape[1],
                    "width": out_image.shape[2],
                    "transform": out_transform})
                    imname = tiffFileName[:-4]+"@"+str(vCode2001)+"@"+cenCode2001+"@"+str(vCode2011)+".tif"
                    saveFileName= imname
                    with rasterio.open(saveFileName, "w", **out_meta) as dest:
#                         print("Hello")
                        dest.write(out_image)
                    count1 += 1
    
                    tif = TIFF.open(saveFileName, mode='r')
                    image = tif.read_image()
                    data = np.array(image)
                    size = image.shape
                    if size[0]>30 and size[1]>30:        
                        ## Concat the images
                        abc = np.stack([data[:,:,0],data[:,:,1],data[:,:,2]],axis = 2)
                        currImageName = imname[:-4]+'.png'
#                         #abc = abc.astype(np.uint8)
#                         scipy.misc.imsave(outputFolder+'/'+destImageName[:-4]+'.png', abc)
#                         #scipy.misc.imsave(outputFolder+'/'+destImageName[:-4]+'.png', np.stack([data[:,0]],axis = 1))
                        imageio.imwrite(currImageName, abc)
                        
                        path_currImageName = currImageName
                        img = Image.open(path_currImageName)                        
#                         img = Image.fromarray(abc)
                        if img.getbbox():
                            out_image = currImageName
                            path_out_image = outputFolder + '/' + out_image
                            im = img
                            im_new = crop_center(im, 150, 150)
                            im_new.save(path_out_image, quality=100)
                            count2 += 1
                            
                        os.remove(path_currImageName)
                    os.remove(saveFileName)
#                     count += 1
                    
                except:
                    continue 
    countfull += [count1]
    count150 += [count2]
    time2 = time.time()
    total_time = (time2 - time1)/60
    time_list += [total_time]
    print(state)

print(countfull, count150, "total time", time_list)
